#+TITLE: Figures for the extended version of the paper
#+AUTHOR: Koniorczyk et al.

- WORK IN PROGRESS, v 0.3

- DO NOT EDIT README.txt, it is for compatibility.
  The README is README.org

* What I have so far

** List all train path in a quantum solution

e.g. realisation 1 in ~cqm5_case3_Integer.pkl~

#+BEGIN_SRC bash 
./read_quantum_pickle.py cqm5_case3_Integer.pkl 1
#+END_SRC

Assumptions:

- The ~arrive~ and ~departure~ fields reflect the *resolved* train paths
  from the optimization.
- The *conflicted* train paths come from the ~conflicted_arrive~ and
  ~conflicted_departure~ fields.
- The original timetables are still to be added
* Line segments
Railway line segments are defined in ~railway_lines.py~. (There is a
variable for railway lines, but we rather use segments which are ad
hoc sequences of stations.) New ones can be defined by adding them
properly to the ~RAILWAYSEGMENTS~ dictionary.

The current plan is to draw diagrams for 2 line segments, containing the
following stations each:

| GLC     | Gliwice                   |
| ZZ      | Zabrze                    |
| RŚl     | Ruda Śląska               |
| RCB     | Ruda Chebzie              |
|         | Świętochłowice            |
| CB      | Chorzów Batory            |
| KTC     | Katowice Towarowa KTC     |
| KO      | Katowice                  |
| KO(STM) | Katowice Stacja Manewrowa |
| KZ      | Katowice Zawodzie         |

and

| KZ      | Katowice Zawodzie         |
| KO(STM) | Katowice Stacja Manewrowa |
| KO      | Katowice                  |
| Bry     | Katowice Brynów           |
| KL      | Katowice Ligota           |
| KtP     | Katowice Piotrowice       |
|         | Katowice Podlesie         |
| Mc      | Mąkołowiec                |
| Ty      | Tychy                     |

In the two figures, only the part of the train paths fitting to these
segments will appear.

* Figures
Figures can be produced as follows:
#+BEGIN_SRC bash 
./echo_gnuplot_file.py cqm5_case5_Integer.pkl --segment 138139KZTY --realisation 2 > tmp.gnuplot
#+END_SRC
The positional argument is the input file (classical or quantum),
~--segment~ is line segment (the currently meaningful ones are:
~137138GLYKZ~ (default), and ~138139KZTY~.  In case of quantum files,
~--realisation~ is the sample number, defaults to 1 if
not specified. The script outputs a gnuplot script, which can be
displayed with gnuplot like this:
#+BEGIN_SRC bash 
gnuplot script.gnuplot
#+END_SRC

The trains are filtered for the segment (to be documented). It is
possible to provide a list of trains that are displayed even if the
filter would not select them with the ~--fixedtrains~ option, e.g.

#+BEGIN_SRC bash 
./echo_gnuplot_file.py PULP_CBC_CMD_case3_Integer.pkl --segment 138139KZTY --fixedtrains="44862,44717" > script.gnuplot
#+END_SRC

See also
#+BEGIN_SRC bash 
./echo_gnuplot_file.py --help
#+END_SRC

The current version is for displaying; there will be a version
producing publication-quality vector pdfs.

* Vector figure files
The script ~echo_gnuplot_file.py~ can produce encapsulated PostScript
files for publication. The output file name is to be specified with
the ~--epsfile~ option. Warning: the specified file will be
overwritten. If the ~--epsbw~ option is set, the eps file will be
black and white.

Important:

- When setting the ~--epsfile~ option, the generated script is still
  to be executed with gnuplot to produce a figure.
- The eps files can be converted to pdf with ~epspdf~. Alternatively,
  set ~\usepackage{epspdf}~ in the LaTeX file to use them
  directly. The conversion is a better choice.

* Next step
- Add train numbers to paths (in progress, to be improved)
- Fine-tune conflicted-resolved figures (bw version to be made)
- Choose the right figures (in progress)
- Create vector pdf figures.
- Add orignal timetables (postponed)
